/* Generated By:JavaCC: Do not edit this line. JavaGrammarConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int CLASS = 8;
  /** RegularExpression Id. */
  int PUBLIC = 9;
  /** RegularExpression Id. */
  int PRIVATE = 10;
  /** RegularExpression Id. */
  int PROTECTED = 11;
  /** RegularExpression Id. */
  int STATIC = 12;
  /** RegularExpression Id. */
  int FINAL = 13;
  /** RegularExpression Id. */
  int VOID = 14;
  /** RegularExpression Id. */
  int INT = 15;
  /** RegularExpression Id. */
  int STRING = 16;
  /** RegularExpression Id. */
  int BOOLEAN = 17;
  /** RegularExpression Id. */
  int IF = 18;
  /** RegularExpression Id. */
  int ELSE = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int FOR = 21;
  /** RegularExpression Id. */
  int RETURN = 22;
  /** RegularExpression Id. */
  int TRUE = 23;
  /** RegularExpression Id. */
  int FALSE = 24;
  /** RegularExpression Id. */
  int NEW = 25;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 26;
  /** RegularExpression Id. */
  int STRING_LITERAL = 27;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 28;
  /** RegularExpression Id. */
  int IDENTIFIER = 29;
  /** RegularExpression Id. */
  int ASSIGNMENT = 30;
  /** RegularExpression Id. */
  int COMPARISON = 31;
  /** RegularExpression Id. */
  int ARITHMETIC_OP = 32;
  /** RegularExpression Id. */
  int LOGICAL_OP = 33;
  /** RegularExpression Id. */
  int SEMICOLON = 34;
  /** RegularExpression Id. */
  int COMMA = 35;
  /** RegularExpression Id. */
  int DOT = 36;
  /** RegularExpression Id. */
  int LPAREN = 37;
  /** RegularExpression Id. */
  int RPAREN = 38;
  /** RegularExpression Id. */
  int LBRACE = 39;
  /** RegularExpression Id. */
  int RBRACE = 40;
  /** RegularExpression Id. */
  int LBRACKET = 41;
  /** RegularExpression Id. */
  int RBRACKET = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"class\"",
    "\"public\"",
    "\"private\"",
    "\"protected\"",
    "\"static\"",
    "\"final\"",
    "\"void\"",
    "\"int\"",
    "\"String\"",
    "\"boolean\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"for\"",
    "\"return\"",
    "\"true\"",
    "\"false\"",
    "\"new\"",
    "<INTEGER_LITERAL>",
    "<STRING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "<IDENTIFIER>",
    "\"=\"",
    "<COMPARISON>",
    "<ARITHMETIC_OP>",
    "<LOGICAL_OP>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
  };

}
